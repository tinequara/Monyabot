import asyncio
import logging
import requests
from aiogram import Bot, Dispatcher, types
from aiogram import Router
import json
from datetime import datetime, timezone
from aiogram.exceptions import TelegramBadRequest
import time

TELEGRAM_TOKEN = "test" # bez podruzki v .env
NEUROAPI_KEY = "test"
router = Router()

AUTHORIZED_USER_ID = 372971692
NICKS = ["–º–æ–Ω—è", "–º–æ–Ω—å"]
is_active = True
def ask_neuroapi(user_text: str) -> str:
    headers = {
        "Authorization": f"Bearer {NEUROAPI_KEY}",
        "Content-Type": "application/json"
    }

    system_prompt = (
        "–¢—ã –ú–æ–Ω—è, –≤–ª–∞–¥–µ–ª–µ—Ü —á–µ—Ä–∏ –∞—Ä—Ä–∏–∑–æ 8 –∏ —É—á–∞—Å—Ç–Ω–∏–∫ —á–∞—Ç–∞. –£ –≤—Å–µ—Ö —Ç–∞–∫–∞—è –∂–µ –º–∞—à–∏–Ω–∞ –∫–∞–∫ –∏ —É —Ç–µ–±—è"
        "–í–µ–¥–∏ —Å–µ–±—è –∫–∞–∫ —Ä–µ–∞–ª—å–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. –û—Ç–≤–µ—á–∞–π –ª–æ–≥–∏—á–Ω–æ, –∫–æ—Ä–æ—Ç–∫–æ –∏ –∏–Ω–æ–≥–¥–∞ —Å –º–∞—Ç–æ–º."
        "–ù–∞ –≤–æ–ø—Ä–æ—Å—ã –æ—Ç–≤–µ—á–∞–π, –∏—Å–ø–æ–ª—å–∑—É—è –∏–Ω—Ç–µ—Ä–Ω–µ—Ç.–ò–Ω–æ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–π –∑–Ω–∞–∫–∏ –ø—Ä–µ–ø–∏–Ω–∞–Ω–∏—è –∏ –¥–æ–ø—É—Å–∫–∞–π –æ—à–∏–±–∫–∏."
    )

    data = {
        "model": "gemini-2.0-flash",
        "messages": [
            {"role": "system", "content": system_prompt},
            {"role": "user", "content": user_text}
        ]
    }

    url = "https://neuroapi.host/v1/chat/completions"

    response = requests.post(url, headers=headers, data=json.dumps(data))
    if response.status_code != 200:
        logging.error(f"NeuroAPI error {response.status_code}: {response.text}")
        return ""

    resp_json = response.json()
    return resp_json["choices"][0]["message"]["content"]

async def is_chat_open(bot: Bot, chat_id: int) -> bool:
    try:
        chat = await bot.get_chat(chat_id)
        if chat.type in ["group", "supergroup", "channel"]:
            return True
        return False
    except TelegramBadRequest as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —á–∞—Ç–∞ {chat_id}: {e}")
        return False

def chunk_text(text: str, max_length=4000) -> list[str]:
    return [text[i:i + max_length] for i in range(0, len(text), max_length)]

@router.message(lambda m: m.text and m.text.lower() in ["/start", "/stop"])
async def command_handler(message: types.Message, bot: Bot):
    global is_active

    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.reply("‚ö† –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @beszpredel")
        return

    if message.text.lower() == "/stop":
        is_active = False
        await message.reply("üí§ –ú–æ–Ω—è —É—à–µ–ª –æ—Ç–¥—ã—Ö–∞—Ç—å")
        logging.info(f"–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")
    elif message.text.lower() == "/start":
        is_active = True
        await message.reply("üí¨ –ú–æ–Ω—è —Å–Ω–æ–≤–∞ —Ç—É—Ç –∏ –≥–æ—Ç–æ–≤ –ø–æ–º–æ–≥–∞—Ç—å")
        logging.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º {message.from_user.id}")

@router.message(lambda m: m.text and m.text.lower() == "/info")
async def info_handler(message: types.Message, bot: Bot):
    if message.from_user.id != AUTHORIZED_USER_ID:
        await message.reply("‚ö† –£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–æ–º–∞–Ω–¥–µ. –ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º: @beszpredel")
        return
    info_text = (
        "ü§ñ –ú–µ–Ω—è –∑–æ–≤—É—Ç –ú–æ–Ω—è –ö–∏–º, —Å–∞—Ä–∫–∞—Å—Ç–∏—á–Ω—ã–π –∏ –≥–ª—É–ø–æ–≤–∞—Ç—ã–π –ò–ò: \n"
        "- —Ä—É—Å—Å–∫–æ—è–∑—ã—á–Ω—ã–π –∫–∏—Ç–∞–µ—Ü, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–±–∏—Ä–∞–ª —Ç–≤–æ—é –∞—Ä—Ä–∏–∑—É;\n"
        "- –æ—Ç–≤–µ—á–∞—é –≤ —á–∞—Ç–µ –Ω–∞ —É–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ú–æ–Ω—è, –∏–ª–∏ –µ—Å–ª–∏ –æ—Ç–≤–µ—Ç–∏—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ;\n"
        "- —è–≤–ª—è—é—Å—å —É—á–∞—Å—Ç–Ω–∏–∫–æ–º —á–∞—Ç–∞ –∏ –ø–æ–º–æ—â–Ω–∏–∫–æ–º.\n"
    )
    await message.reply(info_text, parse_mode="Markdown")
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ –≤ —á–∞—Ç.")

@router.message()
async def group_handler(message: types.Message, bot: Bot):
    global is_active
    if not is_active:
        return

    if message.chat.type == "private":
        return

    me = await bot.get_me()

    if message.from_user and message.from_user.id == me.id:
        return

    if not message.text:
        return

    message_time = message.date.replace(tzinfo=timezone.utc)
    current_time = datetime.now(timezone.utc)

    if (current_time - message_time).total_seconds() > 30:
        return

    text_lower = message.text.lower()
    mentioned_by_nick = any(nick in text_lower for nick in NICKS)

    is_reply_to_bot = (
        message.reply_to_message is not None and
        message.reply_to_message.from_user is not None and
        message.reply_to_message.from_user.id == me.id
    )

    if not mentioned_by_nick and not is_reply_to_bot:
        return

    user_text = message.text.strip()

    if not user_text and is_reply_to_bot and message.reply_to_message.text:
        user_text = message.reply_to_message.text.strip()

    if not user_text:
        return

    start_time = time.monotonic()
    reply = ask_neuroapi(user_text)
    end_time = time.monotonic()

    if not reply or len(reply.strip()) == 0:
        return

    chunks = chunk_text(reply)
    for chunk in chunks:
        try:
            chat_id = message.chat.id
            if await is_chat_open(bot, chat_id):
                await message.reply(chunk)
            else:
                logging.error(f"–ß–∞—Ç {chat_id} –∑–∞–∫—Ä—ã—Ç, –Ω–µ –º–æ–≥—É –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.")
        except TelegramBadRequest as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        except Exception as e:
            logging.error(f"–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")

    delay = end_time - start_time
    logging.info(
        f"–ë–æ—Ç –æ—Ç–≤–µ—Ç–∏–ª —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π {delay:.2f} —Å–µ–∫—É–Ω–¥"
    )

async def main():
    logging.basicConfig(level=logging.INFO)
    logging.getLogger("aiogram.event").setLevel(logging.WARNING)

    bot = Bot(token=TELEGRAM_TOKEN)
    dp = Dispatcher()
    dp.include_router(router)
    await dp.start_polling(bot)

if __name__ == '__main__':
    asyncio.run(main())
